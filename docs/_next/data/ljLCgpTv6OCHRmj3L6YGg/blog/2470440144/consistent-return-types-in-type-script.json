{"pageProps":{"post":{"id":2470440144,"title":"Consistent Return Types in TypeScript","desc":"Eliminate surprises within your functions","html":"<html><head></head><body><p dir=\"auto\">Imagine we have the following function:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"type User = {\n  id: string;\n  permissions: string[];\n};\n\nasync function getUserPermissions(userId: string) {\n  const user = await db.getUserById(userId);\n  if (!user) {\n    return { found: false };\n  }\n\n  return user.permissions;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">type</span> <span class=\"pl-smi\">User</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">id</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">permissions</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getUserPermissions</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">user</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getUserById</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">found</span>: <span class=\"pl-c1\">false</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">permissions</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">The above function has the following implicit return type:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Promise<string[] | { found: boolean }>\"><pre class=\"notranslate\"><span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">string</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">|</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">found</span>: <span class=\"pl-smi\">boolean</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">&gt;</span></pre></div>\n<p dir=\"auto\">The issue is that the two return types have no properties in common, so if you try to do the following:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const userPermissions = await getUserPermissions('123');\nif (!userPermissions.found) { // compiler error here\n  // Handle user not found\n} else if (userPermissions.includes('admin'))\n  // Allow them access\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">userPermissions</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getUserPermissions</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'123'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">userPermissions</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">found</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c\">// compiler error here</span>\n  <span class=\"pl-c\">// Handle user not found</span>\n<span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">userPermissions</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">includes</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'admin'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// Allow them access</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">the TypeScript compiler will yell at you with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Property 'found' does not exist on type 'string[] | { found: boolean; }'\"><pre class=\"notranslate\"><code class=\"notranslate\">Property 'found' does not exist on type 'string[] | { found: boolean; }'\n</code></pre></div>\n<h2 dir=\"auto\">The Fix</h2>\n<p dir=\"auto\">The fix will depend on your business logic. In the above scenario, does your app need to distinguish between a user not being found and the user not having the necessary permissions? If not, you should do the following:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"async function getUserPermissions(userId: string) {\n  const user = await db.getUserById(userId);\n  if (!user) {\n    return [];\n  }\n\n  return user.permissions;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getUserPermissions</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">user</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getUserById</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">permissions</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">This way your function always returns <code class=\"notranslate\">string[]</code>. But if your app <em>does</em> need to distinguish between a user not being found and the user not having the necessary permissions, returning <code class=\"notranslate\">null</code> is probably best:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"async function getUserPermissions(userId: string) {\n  const user = await db.getUserById(userId);\n  if (!user) {\n    return null;\n  }\n\n  return user.permissions;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getUserPermissions</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">user</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getUserById</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">permissions</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">The return type of <code class=\"notranslate\">Promise&lt;string[] | null&gt;</code> is much easier to work with:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const userPermissions = await getUserPermissions('123');\nif (!userPermissions) {\n  // Handle user not found\n} else if (userPermissions.includes('admin'))\n  // Allow them access\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">userPermissions</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getUserPermissions</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'123'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">userPermissions</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// Handle user not found</span>\n<span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">userPermissions</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">includes</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'admin'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// Allow them access</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h2 dir=\"auto\">One Step Further</h2>\n<p dir=\"auto\">The easiest way to make sure you know exactly what type your function is returning is to explicitly add the return type:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"async function getUserPermissions(userId: string): Promise<string[]> {\n  const user = await db.getUserById(userId);\n  if (!user) {\n    return [];\n  }\n\n  return user.permissions;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getUserPermissions</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">)</span>: <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">string</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">user</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getUserById</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">userId</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">user</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">permissions</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">This is a good habit to get into because if you do end up returning something other than <code class=\"notranslate\">string[]</code> in the above function, the TypeScript compiler will yell at you.</p>\n<p dir=\"auto\">If you're using eslint, I would recommend enabling the <a href=\"https://typescript-eslint.io/rules/explicit-function-return-type/\" rel=\"nofollow\" target=\"_blank\">explicit-function-return-type</a> rule, at least as a warning to start. This will ensure that your functions are returning exactly what you expect, with no surprises.</p></body></html>","date":"Aug 16, 2024"}},"__N_SSG":true}